#!/usr/bin/bash
# A bash script to resize active window among two states:
# 1: Max size of screen (but it is not `maximised`, so window borders remain)
# 2: Quarter size of screen, and place it in the center
# Require program xdo, xwininfo, xprop, bc and sed. xdpyinfo might be needed in
# the future.

# Variable setting {{{1
################################################################################
dpy_w=1920
dpy_h=1080

# Use xwininfo to check the value
border_w=10 # account for extra height occupied by border of the window
border_h=10 # account for extra height occupied by border of the window

# Panels on desktop
panel_l=0  # left
panel_r=0  # right
panel_t=32 # top
panel_b=0  # bottom

# keybindings that xdotool uses later
# Note that some keybindings are not consistent, e.g. "ctrl+super+".
keybind_next_screen="super+w"

# Calculare variables {{{1
################################################################################

win_id="$(xdo id)"
win_w="$(xwininfo -id "$win_id" |
	grep -i '^\s*width:' |
	sed -E 's/^[^0-9]+([0-9]+).*$/\1/')"
win_h="$(xwininfo -id "$win_id" |
	grep -i '^\s*height' |
	sed -E 's/^[^0-9]+([0-9]+).*$/\1/')"
win_x="$(xwininfo -id "$win_id" |
	grep -i '^\s*Absolute upper-left X' |
	sed -E 's/^\s*Absolute.*X:\s+([0-9]+)\s*$/\1/')"
win_y="$(xwininfo -id "$win_id" |
	grep -i '^\s*Absolute upper-left Y' |
	sed -E 's/^\s*Absolute.*Y:\s+([0-9]+)\s*$/\1/')"

on_next_screen=""
if [ "$win_x" -gt "$dpy_w" ] || [ "$win_y" -gt "$dpy_h" ]; then
	on_next_screen="1"
fi

# account for display width/height occupied by fixed window panel/dock
panel_w="$(printf "%s + %s\n" "$panel_l" "$panel_r" | bc -s)"
panel_h="$(printf "%s + %s\n" "$panel_t" "$panel_b" | bc -s)"

if ! xprop -id "$win_id" |
	grep -q '^_NET_FRAME_EXTENTS(CARDINAL)' ||
	xprop -id "$win_id" |
	grep -q '^_NET_FRAME_EXTENTS(CARDINAL) = 0, 0, 0, 0$'; then
	border_w=0
	border_h=0
fi

space_w="$(printf "%s - %s\n" "$dpy_w" "$panel_w" | bc -s)"
space_h="$(printf "%s - %s\n" "$dpy_h" "$panel_h" | bc -s)"

# Assume first screen have full 1920 x 1080
large_w="$dpy_w"
large_h="$dpy_h"
small_w="$(printf "%s* 0.5 - %s\n" "$space_w" "$border_w" | bc -s)"
small_h="$(printf "%s * 0.5 - %s\n" "$space_h" "$border_h" | bc -s)"

new_size="large"
if [ "$win_w" -ge "$(printf "%s - %s\n" "$space_w" "$border_w" |
	bc -s)" ] ||
	[ "$win_h" -ge "$(printf "%s - %s\n" "$space_h" "$border_h" |
		bc -s)" ]; then
	new_size="small"
fi

# Main {{{1
################################################################################
new_w="$large_w"
new_h="$large_h"
new_x=0
new_y=0
if [ "$new_size" = "small" ]; then
	new_w="$small_w"
	new_h="$small_h"
	new_x="$(printf "(%s - %s) / 2\n" "$dpy_w" "$new_w" | bc -s)"
	new_y="$(printf "(%s - %s) / 2\n" "$dpy_h" "$new_h" | bc -s)"
fi
xdo resize -w "$new_w" -h "$new_h"
xdo move -x "$new_x" -y "$new_y"
# XXX: this is ugly and the behaviour of using xdotool is unstable
if test "$on_next_screen"; then
	xdotool key "$keybind_next_screen"
fi

# Vim modelines {{{1
################################################################################
# vim: fdm=marker tw=80
