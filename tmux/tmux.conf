# tmux.conf

# Copy environment variables to new session {{{1
######################################################################
# Copy $COLORSCHEME set by Kitty to tmux environment variable
set -g update-environment "COLORSCHEME"

# Define variables {{{1
######################################################################
if-shell -b '[ -d "$XDG_CONFIG_HOME" ]' \
  "tpm_config_root=${XDG_CONFIG_HOME}/tmux" \
  'tpm_config_root=~/.config/tmux'
if-shell -b '[ -d "$XDG_DATA_HOME" ]' \
  "tpm_data_root=${XDG_DATA_HOME}/tmux" \
  'tpm_data_root=~/.local/share/tmux'

# List of plugins for tpm {{{1
######################################################################
set -g @plugin 'tmux-plugins/tpm' # {{{2
set -g @plugin 'tmux-plugins/tmux-sensible' # {{{2
set -g @plugin 'MunifTanjim/tmux-mode-indicator' # {{{2
##################################################
# prompt to display when tmux prefix key is pressed
set -g @mode_indicator_prefix_prompt ' #[bold]WAIT#[nobold] #[fg=magenta]#[bg=#7aa2f7]'
# prompt to display when tmux is in copy mode
set -g @mode_indicator_copy_prompt ' #[bold]COPY#[nobold] #[fg=yellow]#[bg=#7aa2f7]'
# prompt to display when tmux has synchronized panes
set -g @mode_indicator_sync_prompt ' #[bold]SYNC#[nobold] #[fg=red]#[bg=#7aa2f7]'
# prompt to display when tmux is in normal mode
set -g @mode_indicator_empty_prompt ' #[bold]TMUX#[nobold] #[fg=cyan]#[bg=#7aa2f7]'
# style values for prefix prompt
set -g @mode_indicator_prefix_mode_style 'bg=magenta,fg=black'
##################################################

set -g @plugin 'Morantron/tmux-fingers' # {{{2
##################################################
set -g @fingers-pattern-0 '(/|~/)?(\.?[a-zA-Z0-9]+([-_. ][a-zA-Z0-9]+)*/)+\.?[a-zA-Z0-9]+([-_. ][a-zA-Z0-9]+)*'
##################################################

set -g @plugin 'tmux-plugins/tmux-resurrect' # {{{2
##################################################
set -g @resurrect-dir '~/.local/share/tmux/resurrect'
set -g @resurrect-capture-pane-contents 'on'
##################################################
set -g @plugin 'tmux-plugins/tmux-sessionist' # {{{2

# Set options {{{1
######################################################################
set -g default-terminal "tmux-256color"
# True color support:
set -sa terminal-overrides ",xterm-termite:Tc"
# Allow true colour within tmux (NeoVim recommended)
set -sa terminal-features ',xterm-kitty:RGB'
# For showing undercurl in nvim
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -as terminal-overrides ',*:Smulc=\E[4::%p1%dm'
# Set focus event to enable 'autoread' in NeoVim (NeoVim recommended)
set -g focus-events on

set -g mouse on
set -sg escape-time 0 # Make the <Esc> key no delay

# Bind keys {{{1
######################################################################
# Use a different prefix key instead
unbind C-b
set -g prefix C-s
bind C-s send-prefix
%if #{||:#{==:#{host},dq-x1c},#{==:#{host},dqarch}}
    set -g prefix C-a
    bind C-a send-prefix
%endif

set-window-option -g mode-keys vi
# Use Vim like keys to select
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
# Add binding to copy to xclip (press y in copy-mode-vi)
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
# for easy switch back to Vim above and zoom in (actually switch between panes)
bind -n M-q select-pane -U \; resize-pane -Z
# Open panes in current directory
bind '"' split-window -v -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
# Make `<C-a> R` reload the config file
# NOTE: If use variable, it won't expand but became an empty string
bind R source-file ~/.config/tmux/tmux.conf
# popup terminal in tmux. ^C terminate the whole terminal together with all running programs immediately.
bind C-e popup
# Send C-l to clear screen. But since tmux still catch it and move cursor to window on the right, so also do C-h afterwards to cancel the effect.
bind C-l send-keys C-l C-h

# For navigating and swapping windows. -r means can repeat the command in a short frame of time {{{2
########################################
bind -r n select-window -t +
bind -r p select-window -t -
bind -r > swap-window -t + \; select-window -t +
bind -r < swap-window -t - \; select-window -t -

# Rebind . such that it can swap window if index is occupied
bind . command-prompt -1p "Move/Swap window to index:" \
  "if-shell 'tmux list-windows -t #S | grep -q \"^%1\"' 'swapw -t %1 ; selectw -t %1' 'movew -t %1'"

# Swap pane with marked pane
bind S swap-pane

# tmux nvim navigation intergration {{{2
########################################
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/aserowy/tmux.nvim
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
"bind -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
"bind -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-l' select-pane -R
bind -T copy-mode-vi 'C-\' select-pane -l

bind -n 'C-Left' if-shell "$is_vim" 'send-keys C-Left' 'resize-pane -L 1'
bind -n 'C-Down' if-shell "$is_vim" 'send-keys C-Down' 'resize-pane -D 1'
bind -n 'C-Up' if-shell "$is_vim" 'send-keys C-Up' 'resize-pane -U 1'
bind -n 'C-Right' if-shell "$is_vim" 'send-keys C-Right' 'resize-pane -R 1'

bind -T copy-mode-vi C-Left resize-pane -L 1
bind -T copy-mode-vi C-Down resize-pane -D 1
bind -T copy-mode-vi C-Up resize-pane -U 1
bind -T copy-mode-vi C-Right resize-pane -R 1

# Powerline setup {{{1
######################################################################
%if #{==:#{host},dq-x1c}
    run-shell "powerline-daemon -q -r"
    source "$HOME/.local/lib/python3.6/site-packages/powerline/bindings/tmux/powerline.conf"
%endif
%if #{==:#{host},dqarch}
    # run-shell "powerline-daemon -q -r"
    # source "/usr/lib/python3.11/site-packages/powerline/bindings/tmux/powerline.conf"
%endif

# Colourscheme {{{1
######################################################################
source-file ~/src/dotfiles/tmux/themes/tokyonight_night_dq.tmux

# Tmux Package Manager (tpm) {{{1
######################################################################
# NOTE: If use variable, it won't expand but became an empty string:
set-environment -g TMUX_PLUGIN_MANAGER_PATH ~/.local/share/tmux/plugins

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run ~/.local/share/tmux/plugins/tpm/tpm

# Vim modelines {{{1
######################################################################
# vim: fdm=marker fdl=0
